{
    "compilerOptions": {
        // Включает инкрементальную компиляцию, что ускоряет последующие сборки,
        // сохраняя информацию о предыдущей компиляции в файле .tsbuildinfo
        "incremental": true,
        // Файл для хранения информации о сборке (ускоряет повторную компиляцию)
        "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
        // Целевая версия ECMAScript для компиляции (ES2020, так как он новее ES6)
        "target": "ES2023",
        // Используемая система модулей (ESNext для современных ES-модулей)
        "module": "ESNext",
        // Использование `define` вместо `Object.defineProperty` для объявления полей классов
        "useDefineForClassFields": true,
        // Доступные библиотеки (ES2020 + API браузера)
        "lib": ["ES2023", "DOM", "DOM.Iterable"],
        // Пропуск проверки типов в библиотеках (ускоряет компиляцию)
        "skipLibCheck": true,
        /* Bundler mode (оптимизация для Webpack, Vite и других сборщиков) */
        // Стратегия резолвинга модулей (bundler подходит для Vite, но оставляем поддержку Node.js)
        "moduleResolution": "bundler",
        // Каждому файлу создаётся свой независимый модуль (ускоряет компиляцию, полезно для Vite)
        "isolatedModules": true,
        // Принудительное обнаружение модулей (даже если нет `export` или `import`)
        "moduleDetection": "force",
        // Используемый формат JSX (React 17+ с автоматическим импортом JSX)
        "jsx": "react-jsx",
        /* Дополнительные настройки совместимости */
        // Разрешает доступ к глобальным объектам UMD (например, для библиотек без ES-модулей)
        "allowUmdGlobalAccess": true,
        // Позволяет компилировать JavaScript-файлы вместе с TypeScript
        "allowJs": true,
        // Разрешает использовать синтетический импорт по умолчанию
        "allowSyntheticDefaultImports": true,
        // Улучшает совместимость между CommonJS и ES модулями
        "esModuleInterop": true,
        // Поддержка импорта JSON файлов в TypeScript
        "resolveJsonModule": true,
        // Требует одинаковый регистр букв для всех файлов (предотвращает ошибки в кросс-платформенной среде)
        "forceConsistentCasingInFileNames": true,
        /* Linting (Правила проверки кода) */
        // Включает строгий режим TypeScript (рекомендуется для лучшей типизации)
        "strict": true,
        // Ошибка при объявлении переменных, которые не используются
        "noUnusedLocals": true,
        // Ошибка при передаче неиспользуемых параметров в функции
        "noUnusedParameters": true,
        // Запрещает пропуск `break` в `switch` (предотвращает неожиданные ошибки)
        "noFallthroughCasesInSwitch": true
    },
    // Конфигурация для `ts-node`
    "ts-node": {
        "compilerOptions": {
            // Использует CommonJS для совместимости с инструментами Node.js
            "module": "CommonJS"
        }
    }
}
